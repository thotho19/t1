custom.dictionaries.dir = ${user.home}/.lago
dictionaries = [
  {
    name = global
    # Trimmed from http://en.wikipedia.org/wiki/ISO_8583
    fields {
      2 = Primary account number
      3 = Processing code
      4 = Transaction amount
      5 = Settlement amount
      6 = Cardholder billing amount
      7 = Transmission date and time
      8 = Cardholder billing fee
      9 = "Conversion rate - settlement"
      10 = "Conversion rate - cardholder billing"
      11 = System trace audit number
      12 = Local transaction time
      13 = Local transaction date
      14 = Expiration date
      15 = Settlement date
      16 = Conversion date
      17 = Capture date
      18 = Merchant type
      19 = Acquiring institution country code
      20 = PAN country code
      21 = Forwarding institution country code
      22 = Point of service entry mode
      23 = Application PAN sequence number
      24 = Function code
      25 = Point of service condition code
      26 = Point of service capture code
      27 = Authorizing identification response length
      28 = Transaction fee amount
      29 = Settlement fee amount
      30 = Transaction processing fee amount
      31 = Settlement processing fee amount
      32 = Acquiring institution identification code
      33 = Forwarding institution identification code
      34 = Primary account number extended
      35 = Track 2 data
      36 = Track 3 data
      37 = Retrieval reference number
      38 = Authorization identification response
      39 = Response code
      40 = Service restriction code
      41 = Card acceptor terminal identification
      42 = Card acceptor identification code
      43 = Card acceptor name/location
      44 = Additional response data
      45 = Track 1 data
      46 = "Additional data - ISO"
      47 = "Additional data - national"
      48 = "Additional data - private"
      49 = Transaction currency code
      50 = Settlement currency code
      51 = Cardholder billing currency code
      52 = Personal identification number data
      53 = Security related control information
      54 = Additional amounts
      64 = Message authentication code
      65 = Extended bitmap
      66 = Settlement code
      67 = Extended payment code
      68 = Receiving institution country code
      69 = Settlement institution country code
      70 = Network management information code
      71 = Message number
      72 = Last message number
      73 = Action date
      74 = "Credits - number"
      75 = "Credits - reversal number"
      76 = "Debits - number"
      77 = "Debits - reversal number"
      78 = Transfer number
      79 = "Transfer - reversal number"
      80 = Inquiries number
      81 = "Authorizations - number"
      82 = "Credits - processing fee amount"
      83 = "Credits - transaction fee amount"
      84 = "Debits - processing fee amount"
      85 = "Debits - transaction fee amount"
      86 = "Credits - amount"
      87 = "Credits - reversal amount"
      88 = "Debits - amount"
      89 = "Debits - reversal amount"
      90 = Original data elements
      91 = File update code
      92 = File security code
      93 = Response indicator
      94 = Service indicator
      95 = Replacement amounts
      96 = Message security code
      97 = Net settlement amount
      98 = Payee
      99 = Settlement institution identification code
      100 = Receiving institution identification code
    }
    subfields {
      43.1 = Address
      43.2 = City
      43.3 = State
      43.4 = Country
    }
    shortNames {
      0 = mti
      2 = pan
      11 = stan
      18 = mcc
      37 = rrn
      64 = mac
      70 = nmic
      128 = mac
    }
    types = {
      4 = Integer
      11 = Integer
      lifespan = Integer
    }
    translations = [
      {
        field = "0"
        values {
          0100 = Authorization Request
          0110 = Authorization Response
          0200 = Financial Request
          0210 = Financial Response
          0220 = Financial Advice
          0230 = Financial Response
          0400 = Reversal Request
          0410 = Reversal Response
          0420 = Reversal Advice
          0430 = Reversal Advice
          0800 = Network Management Request
          0810 = Network Management Response
          0820 = Network Management Advice
          0830 = Network Management Response
        }
      },
      {
        field = "70"
        filter = "0~/\\d8\\d\\d/"
        values = {
          101 = Sign On
          301 = Echo
        }
      }
    ]
  }
]
logTypes: {
 "apache": {
    class: "io.github.binaryfoo.lagotto.reader.RegexParsedLog"
    args: [
      """\[(?<timestamp>\d{2}/\w{3}/\d{4} \d{2}:\d{2}:\d{2} \w{3,4})\].* "(?<method>[^ ]+) (?<url>[^"]+) HTTP[^"]*" (?<responseCode>\d{3}) [+-X] [-0-9]+ (?<responseTime>\d+).*""",
      "dd/MMM/yyyy HH:mm:ss 'AEDT'"
      "io.github.binaryfoo.lagotto.reader.AnyLineRecogniser"
    ]
  }
 "jetty": {
    class: "io.github.binaryfoo.lagotto.reader.RegexParsedLog"
    args: [
      """(?<sourceIp>[0-9.]+)[- ]*\[(?<timestamp>\d{2}/\w{3}/\d{4}:\d{2}:\d{2}:\d{2} [-+0-9]{0,5})\].* "(?<method>[^ ]+) (?<url>[^"]+) HTTP[^"]*" (?<responseCode>\d{3}) (?<responseSize>\d+) +(?<responseTime>\d+).*""",
      "dd/MMM/yyyy:HH:mm:ss Z"
      "io.github.binaryfoo.lagotto.reader.AnyLineRecogniser"
    ]
  }
 "log4j": {
    object: "io.github.binaryfoo.lagotto.reader.Log4jLog"
    },
  "jpos": {
    object: "io.github.binaryfoo.lagotto.reader.JposLog"
  }
  "gc": {
    class: "io.github.binaryfoo.lagotto.reader.JvmGCLog"
  }
  "gc-regex": {
    class: "io.github.binaryfoo.lagotto.reader.RegexParsedLog"
    args: [
      // 2015-01-08T19:27:57.998+1100: 270444.004: [Full GC [PSYoungGen: 21645K->0K(1368448K)] [ParOldGen: 2786834K->1954159K(2796224K)] 2808479K->1954159K(4164672K) [PSPermGen: 62622K->62165K(125312K)], 4.6375250 secs] [Times: user=14.42 sys=0.00, real=4.63 secs]
      // 2015-06-12T19:28:18.722+1000: 809846.370: [GC-- [PSYoungGen: 1357737K->1357737K(1357760K)] 4125456K->4153958K(4153984K), 0.4251890 secs] [Times: user=0.58 sys=0.00, real=0.42 secs]
      """(?<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[- +]\d{4}):[^\[]*\[(?<type>[^\]\[]+) (?:\[PSYoungGen: (?<youngBefore>\d+)K->(?<youngAfter>\d+)K\((?<young>\d+)K\)\])?[^\]\[]*(?:\[ParOldGen: (?<oldBefore>\d+)K->(?<oldAfter>\d+)K\((?<old>\d+)K\)\])?[^\]\[]* (?<before>\d+)K->(?<after>\d+)K\((?<heap>\d+)K\).* \[.*real=(?<pause>[0-9.]+) secs].*"""
      "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
      "io.github.binaryfoo.lagotto.reader.GcLogLineRecogniser"
    ]
  }
  "csv": {
    class: "io.github.binaryfoo.lagotto.reader.XsvLog"
    args: [ ",", true ]
  }
  "icsv": {
    class: "io.github.binaryfoo.lagotto.reader.XsvLog"
    args: [ ",", false ]
  }
  "tsv": {
    class: "io.github.binaryfoo.lagotto.reader.XsvLog"
    args: [ "\t", true ]
  }
  "jstack": {
    object: "io.github.binaryfoo.lagotto.reader.JstackLog"
  }
}
autoDetectLogTypes = [
  # autodetecting a regex based log is a bit slow
  "log4j"
  "jpos"
]